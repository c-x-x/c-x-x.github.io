<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx笔记</title>
    <url>/2021/08/13/Nginx%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><p>Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>
<p>Nginx是一个高性能的<code>http</code>和<code>反向代理</code>web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务</p>
<p>Nginx是一款<code>轻量级</code>的Web 服务器<code>反向代理</code>服务器及<code>电子邮件</code>（IMAP&#x2F;POP3）代理服务器</p>
<p>Nginx作为负载均衡服务：Nginx 既可以在内部直接支持 Rails 和 PHP 程序对外进行服务，也可以支持作为 HTTP<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1">代理服务</a>对外进行服务</p>
<p><strong>特点</strong>: </p>
<ul>
<li>占有内存少</li>
<li><a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强</li>
<li>安装非常简单</li>
<li>配置文件非常简介（还能够支持perl语法）</li>
<li>Bug非常少，启动特别容易</li>
<li>并且几乎可以做到7*24不间断运行，即使运行几个月也不需要重新启动</li>
<li>你还可以在不间断服务的情况下进行软件版本的升级</li>
</ul>
<p>Nginx代码完全用c语言从头写成，官方测试表明能够支持高达50000个并发连接数的响应</p>
<h2 id="Nginx的作用"><a href="#Nginx的作用" class="headerlink" title="Nginx的作用"></a>Nginx的作用</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote>
<p>Http代理，<strong>反向代理</strong>：作为web服务器中最常见的功能之一，尤其是反向代理</p>
</blockquote>
<p><strong>正向代理：</strong>代理客户端，在本机上装的</p>
<p>游戏加速：VPN</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811093420721.png" alt="image-20210811093420721"></p>
<p><strong>反向代理</strong>：代理服务器</p>
<p>网站：百度</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811094102967.png" alt="image-20210811094102967"></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote>
<p>Nginx提供的<strong>负载均衡</strong>策略有两种：<strong>内置策略</strong>和<strong>扩展策略</strong>。内置策略位轮询，加权轮询，Ip hash。扩展策略，天马行空，只有你想不到没有它做不到</p>
</blockquote>
<p>轮询：</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811095222381.png" alt="image-20210811095222381"></p>
<p>加权轮询：</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811095648780.png" alt="image-20210811095648780"></p>
<p>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一客户端ip的请求分发给同一台服务器，可以解决session不共享的问题。</p>
<p>如果这台服务器挂了，对应的信息就没了</p>
<p>不建议使用nginx做session共享，建议使用：Redis</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811100201004.png" alt="image-20210811100201004"></p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><blockquote>
<p>动静分离，在我们的软件开发中，有些请求需要后台处理，有些请求是不经过后台处理的（如：css、html、jpg、js等文件），这些不经过后台处理的文件统称为静态文件，让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开，动静资源做好拆分以后，我们就可以根据静态资源的特点将其做缓存操作，提高资源响应速度。</p>
</blockquote>
<p>静态资源直接从nginx返回，不会再走到你的项目里里面</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811101532735.png" alt="image-20210811101532735"></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><blockquote>
<p>Windows下安装</p>
</blockquote>
<p><strong>1、下载nginx</strong></p>
<p>下载地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811102149829.png" alt="image-20210811102149829"></p>
<p><strong>2、启动nginx</strong></p>
<p>解压后进入目录，在目录运行cmd输入nginx.exe，回车即可</p>
<p><strong>3、检查nginx是否启动成功</strong></p>
<p>浏览器输入如<a href="http://localhost/">http://localhost:80</a></p>
<p>如下即成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811102614264.png" alt="image-20210811102614264"></p>
<p><strong>4、配置监听</strong></p>
<p>conf目录下nginx.conf，默认监听端口为80，如果被占用，可以修改为其他的</p>
<p><strong>5、关闭nginx</strong></p>
<p>关闭cmd窗口是<strong>不能结束nginx进程的</strong></p>
<p>方式1：输入命令<code>nginx -s stop</code>（快速停止nginx）或者<code>nginx -s quit</code>（完整有序的停止nginx）</p>
<p>方式2：<code>taskkill /f /t /im nginx.exe</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill 进程终止</span><br><span class="line">/f 强制停止</span><br><span class="line">/t 终止指定的进程和任何由此启动的子进程</span><br><span class="line">/im 指定进程名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux下安装</p>
</blockquote>
<p>🤡  自己上网找    <strong>或者</strong> —&gt;   <a href="https://cb-baidu.vercel.app/?q=TGludXjlronoo4VOZ2lueA==">点此查看</a></p>
<h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx  启动</span><br><span class="line">./nginx -s stop  停止</span><br><span class="line">./nginx -s quit  安全退出</span><br><span class="line">./nginx -s reload  从新加载配置文件</span><br><span class="line">ps aux|grep nginx  查看nginx进程</span><br></pre></td></tr></table></figure>

<h2 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall -cmd --list-all</span><br><span class="line"><span class="comment"># 查询端口是否开放</span></span><br><span class="line">firewall -cmd --query-port=8080/tcp</span><br><span class="line"><span class="comment"># 开放80端口</span></span><br><span class="line">firewall -cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="comment"># 移除端口</span></span><br><span class="line">firewall -cmd --permanent --remove-port=8080/tcp</span><br><span class="line"><span class="comment"># 重启防火墙（修改配置后要重启防火墙）</span></span><br><span class="line">firewall -cmd --reload</span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line">firewall -cmd  Linux提供的操作firewall的一个工具</span><br><span class="line">--permanent  表示设置为持久</span><br><span class="line">--add-port  标识添加的端口</span><br></pre></td></tr></table></figure>

<h2 id="实战使用"><a href="#实战使用" class="headerlink" title="实战使用"></a>实战使用</h2><p>反向代理和负载均衡配置</p>
<p>weight权重</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server 127.0.0.1:8080 weight=3;</span><br><span class="line">server 127.0.0.1:8081 weight=1;</span><br><span class="line"><span class="comment"># 打4次请求3次到第一台</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811112147636.png" alt="image-20210811112147636"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210811113014155.png" alt="image-20210811113014155"></p>
<h1 id="这个只是入门！"><a href="#这个只是入门！" class="headerlink" title="这个只是入门！"></a>这个只是入门！</h1>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet笔记</title>
    <url>/2023/09/29/Servlet/</url>
    <content><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>sun公司开发的动态web的一门技术</li>
<li>sun在这些API中提供一个接口叫做Servlet，如果一项开发一个servlet，只需要完成两个小步骤：<ul>
<li>编写一个类，实现servlet接口</li>
<li>把开发好的Java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p><strong>把实现了servlet接口的Java程序叫做：servlet</strong></p>
<h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><ol>
<li><p>创建一个普通maven项目，删掉里面的src，这个空的maven工程就是Maven主工程</p>
</li>
<li><p>pom文件中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个model</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210708111612068.png" alt="image-20210708111612068"></p>
</li>
<li><p>maven环境优化</p>
<ul>
<li><p>修改web.xml为最新版</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将maven的结构创建完整，如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210708112336793.png" alt="image-20210708112336793"></p>
</li>
</ul>
</li>
<li><p>编写一个servlet程序</p>
<ol>
<li><p>创建一个普通类</p>
</li>
<li><p>实现Servlet接口，直接集成HttpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> biaoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">//由于get或者post只是请求的不同方式，所以可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;hello,Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>编写servlet的映射</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210708151846273.png" alt="image-20210708151846273"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Q：为什么需要映射</p>
<p>A：我们写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务器中注册我们写的servlet，还需要给他一个浏览器能够访问的路径</p>
</li>
<li><p>配置tomcat</p>
<p><em><strong>注意配置项目发布的路径</strong></em></p>
</li>
<li><p>启动测试</p>
</li>
</ol>
<p><strong>关于maven父子工程：</strong>父项目中的Java子项目可以直接使用</p>
<h3 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h3><p>百度</p>
<h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><ol>
<li><p>一个Servlet可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--默认请求--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定一些后缀或者前缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet的请求--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意*前不能加项目映射的路径--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优先级问题</p>
<p>指定了固有的映射路径优先级更高，如果找不到就会走默认请求</p>
</li>
</ol>
<h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>web容器启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用</p>
<h4 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h4><p><em><strong>注：可以用session或者request一些方法顶替</strong></em></p>
<p>我在这个Servlet中保存的数据，可以在另外一个Servlet中拿到</p>
<p>HelloServlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        String username=<span class="string">&quot;程彪&quot;</span>;<span class="comment">//数据</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;username&quot;</span>,username);<span class="comment">//将一个数据保存在ServletContext中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GetServlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) servletContext.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h4><p><em><strong>注：几乎不用</strong></em></p>
<p>web.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置web应用的初始化参数--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>lalala<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.ServletDemo03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>lalala<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo03</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p><em><strong>注：可以用request去做</strong></em></p>
<p>web.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo04<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.ServletDemo04<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo04<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/rd<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo04</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入ServletDemo04&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *分开写</span></span><br><span class="line"><span class="comment">        * RequestDispatcher url = context.getRequestDispatcher(&quot;url&quot;);</span></span><br><span class="line"><span class="comment">        * url.forward(req,resp);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//合起来写</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;getp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h4><p><em><strong>注：可以用类加载器或者反射去做</strong></em></p>
<p><em><strong>maven扩展：</strong></em></p>
<p>maven由于约定大于配置，我们写的配置文件可能出现无法导出或者生效的问题</p>
<p>解决方案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--在build中配置resources，来防止资源导出失败--&gt;</span><br><span class="line"> &lt;build&gt;</span><br><span class="line">     &lt;resources&gt;</span><br><span class="line">         &lt;resource&gt;</span><br><span class="line">             &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">             &lt;includes&gt;</span><br><span class="line">                 &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                 &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">             &lt;/includes&gt;</span><br><span class="line">             &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">         &lt;/resource&gt;</span><br><span class="line">         &lt;resource&gt;</span><br><span class="line">             &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">             &lt;includes&gt;</span><br><span class="line">                 &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                 &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">             &lt;/includes&gt;</span><br><span class="line">             &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">         &lt;/resource&gt;</span><br><span class="line">     &lt;/resources&gt;</span><br><span class="line"> &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p><strong>发现都被打包到同一路径下：classes，我们俗称这个路径为classpath：</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo05</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        resp.getWriter().print(username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo05<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.ServletDemo05<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo05<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo05<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表<strong>请求</strong>的HttpServletRequest对象，代表<strong>相应</strong>的一个HttpServletResponse对象</p>
<p>如果要获取客户端请求过来的参数：找HttpServletRequest</p>
<p>如果要获取客户端相应一些信息：找HttpServletResponse</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>负责向浏览器发送数据的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>

<p><strong>负责向浏览器发送响应头的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String var1)</span>;</span><br><span class="line">                                       </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> var1)</span>;       </span><br><span class="line">                                       </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> var1)</span>;  </span><br><span class="line">                                       </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String var1)</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line">                                           </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addDateHeader</span><span class="params">(String var1, <span class="type">long</span> var2)</span>;</span><br><span class="line">                                           </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String var1, String var2)</span>;  </span><br><span class="line">                                           </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addHeader</span><span class="params">(String var1, String var2)</span>;  </span><br><span class="line">                                           </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;  </span><br><span class="line">                                           </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addIntHeader</span><span class="params">(String var1, <span class="type">int</span> var2)</span>;  </span><br></pre></td></tr></table></figure>

<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><ol>
<li>获取下载文件的路径</li>
<li>下载的文件名是啥？</li>
<li>想办法让浏览器能够支持我们下载的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象 </li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区的数据输出到客户端</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取下载文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\IdeaProjects\\javaweb-02-servlet\\response\\target\\classes\\xx.jpg&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件路径：&quot;</span>+realPath);</span><br><span class="line">        <span class="comment">//2. 下载的文件名是啥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//3. 想办法让浏览器能够支持我们下载的东西</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//4. 获取下载文件的输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">        <span class="comment">//5. 创建缓冲区</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//6. 获取OutputStream对象</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        <span class="comment">//7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区的数据输出到客户端</span></span><br><span class="line">        <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8.关闭流</span></span><br><span class="line">        in.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fileDown<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.FileServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fileDown<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/down<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="验证码功能"><a href="#验证码功能" class="headerlink" title="验证码功能"></a>验证码功能</h4><p>验证码怎么来的</p>
<ul>
<li>前端实现，js</li>
<li>后端实现，需要Java的图片类，生成一个图片</li>
</ul>
<h4 id="实现重定向"><a href="#实现重定向" class="headerlink" title="实现重定向"></a>实现重定向</h4><p>一个web资源收到客户端请求后，他会通知客户端去访问另外一个web资源，这个过程叫重定向</p>
<p>常见场景：</p>
<ul>
<li><p>用户登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedirectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/r/down&quot;</span>);<span class="comment">//重定向</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重定向和转发的区别：</p>
<p>相同点：</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点：</p>
<ul>
<li>请求转发的时候，url不会发生变化</li>
<li>重定向的时候，url地址栏会发生变化</li>
</ul>
<p>登录案例：</p>
<p>RequestTest：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTest</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进去请求&quot;</span>);</span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot;----&quot;</span>+password);</span><br><span class="line">        <span class="comment">//重定向到一个页面</span></span><br><span class="line">        <span class="comment">//重定向的时候一定要注意路径问题，否则就会404  /r是项目名</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/r/success.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;哈喽！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的的项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    密码：&lt;/nbsp&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>request<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>request<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，Http请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest方法，获得客户端的所有信息</p>
<h4 id="获取前端传递的参数-并且请求转发"><a href="#获取前端传递的参数-并且请求转发" class="headerlink" title="获取前端传递的参数,并且请求转发"></a>获取前端传递的参数,并且请求转发</h4><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210713102821199.png" alt="image-20210713102821199"></p>
<p>LoginServlet.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//后台接收中文乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String[] hobbys = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(hobbys));</span><br><span class="line">        System.out.println(username+<span class="string">&quot;::&quot;</span>+password);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        爱好：</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;唱歌&quot;</span>/&gt;唱歌</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;跳舞&quot;</span>/&gt;跳舞</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;代码&quot;</span>/&gt;代码</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;女孩&quot;</span>/&gt;女孩</span><br><span class="line"></span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>success.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: biaoc</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">7</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">52</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello！&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;蟹不肉&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.cheng.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>重定向和转发的区别</strong></em></p>
<p>相同点：页面都会跳转</p>
<p>不同点：</p>
<ul>
<li>请求转发的时候，url不会发生变化  307</li>
<li>重定向的时候，url会发生变化  302</li>
</ul>
<h3 id="Session（会话）、Cookie（曲奇饼干）"><a href="#Session（会话）、Cookie（曲奇饼干）" class="headerlink" title="Session（会话）、Cookie（曲奇饼干）"></a>Session（会话）、Cookie（曲奇饼干）</h3><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问了多个web资源，关闭浏览器，这个过程可以称之为会话</p>
<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们知道他曾经来过，称之为有状态会话</p>
<p><em><strong>一个网站，怎么证明你来过？</strong></em></p>
<p>客户端			服务端</p>
<p>服务端给客户端一个信件，客户端下次访问服务端带上信件即可	Cookie</p>
<p>服务器登记你来过了，下次你来的时候我匹配你	Session</p>
<h4 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h4><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（相应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息，我们可以把信息或者数据放在session中</li>
</ul>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><ol>
<li><p>从请求中拿到cookie信息</p>
</li>
<li><p>服务器响应给客户端cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> biaoc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieDemo01</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//解决中文乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="comment">//cookie,服务器端从客户端获取</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();<span class="comment">//这里返回数组，说明cookie可能存在多个</span></span><br><span class="line">        <span class="comment">//判断cookie石是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (cookies!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果存在</span></span><br><span class="line">            out.write(<span class="string">&quot;上一次访问的时间是：&quot;</span>);</span><br><span class="line">           <span class="comment">/* for (Cookie cookie : cookies) &#123;</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">                <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> cookies[i];</span><br><span class="line">                <span class="comment">//获取cookie的名字</span></span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;lastLoginTime&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//获取cookie的值</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">lastLoginTime</span> <span class="operator">=</span> Long.parseLong(cookie.getValue());</span><br><span class="line">                    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(lastLoginTime);</span><br><span class="line">                    out.write(date.toLocaleString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.print(<span class="string">&quot;这是第一次访问&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//服务端给客户端响应一个cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lastLoginTime&quot;</span>,System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//cookie有效期为1天</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>用到的方法</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie [] cookies = req.getCookies(); <span class="comment">//获得cookie</span></span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie的key</span></span><br><span class="line">cookie.getValue(); <span class="comment">//获得cookie中的vlaue</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lastLoginTime&quot;</span>,System.currenTimemillis()+<span class="string">&quot;&quot;</span>); <span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<p>cookie：一般会保存在本地的用户目录下Appdata</p>
<p><strong>细节问题：</strong></p>
<ul>
<li>一个cookie只能保存一个信息</li>
<li>一个web站点可以给浏览器发送多个cookie，最多20个</li>
<li>cookie大写有限制4kb</li>
<li>300个cookie浏览器上限</li>
</ul>
<p><strong>删除cookie：</strong></p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期时间为0</li>
</ul>
</li>
</ol>
<h4 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）"></a>Session（重点）</h4><p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没关就存在</li>
<li>用户登录之后，整个网站它都可以访问—&gt;保存用户信息</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210713163741509.png" alt="image-20210713163741509"></p>
<p>Session和Cookie的区别：</p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session把用户的数据写到用户独占Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象由服务端创建</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中</li>
</ul>
<p><strong>使用Session：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cheng.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo01</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//得到session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//给session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;程彪&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="comment">//获取session的id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        <span class="comment">//判断Session是不是新创建的</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功，ID为：&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session已经在服务器中存在，ID为：&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//手动注销session</span></span><br><span class="line">        session.invalidate();</span><br></pre></td></tr></table></figure>

<p><strong>会话自动过期：web.xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置session默认失效时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1分钟后Session自动失效，分钟为单位--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>  反对士大夫大师傅士大夫大师傅地方地方的加Sega就覅的室内健身jin’j’sijjisjjinjsijjisj</p>
<p>JSP	—&gt;    前端知识！ html + js</p>
<p>过滤器</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/2021/07/14/Springboot/</url>
    <content><![CDATA[<p><strong>注：</strong></p>
<p>SpringBoot简化Spring：SpringBoot 打jar包：内嵌tomcat，微服务架构</p>
<p>服务越来越多：springcloud</p>
<h2 id="第一个springboot程序"><a href="#第一个springboot程序" class="headerlink" title="第一个springboot程序"></a>第一个springboot程序</h2><p>略过</p>
<h3 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h3><ol>
<li><p>更改端口号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 更改端口号</span><br><span class="line">server.port=8081</span><br></pre></td></tr></table></figure>
</li>
<li><p>改springboot  banner</p>
<ul>
<li>在resource新建banner.txt文件</li>
<li>进入网址<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></li>
<li>选取一个进行复制，复制到banner.txt里面即可</li>
</ul>
</li>
</ol>
<h2 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h2><p>把application.properties删掉，换成application.yaml（官方推荐）</p>
<h3 id="yaml写法"><a href="#yaml写法" class="headerlink" title="yaml写法"></a><strong>yaml写法</strong></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对空格要求十分高</span></span><br><span class="line"><span class="comment"># 可以注入到配置类中</span></span><br><span class="line"><span class="comment"># 普通的key-value</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">cheng</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">小黑</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">cheng</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>

<h3 id="yaml可以给实体类赋值"><a href="#yaml可以给实体类赋值" class="headerlink" title="yaml可以给实体类赋值"></a>yaml可以给实体类赋值</h3><p>新建一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cheng.hellospringboot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;大黄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715153509653.png" alt="image-20210715153509653"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>Springboot测试</p>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715154134603.png" alt="image-20210715154134603"></p>
<h3 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h3><p>yaml写first-name</p>
<p>实体类可以写firstName</p>
<h3 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h3><p>Springboot中可以用<code>@validated</code>来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span>  <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行会报错提示不是一个合法的电子邮件地址	x_x</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715160006907.png" alt="image-20210715160006907"></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="line">private String userName;</span><br><span class="line">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="line">private int age;</span><br><span class="line">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line">@Null       验证对象是否为null</span><br><span class="line">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line">@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">@Length(min=, max=) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line">@Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br></pre></td></tr></table></figure>

<h3 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161828124.png" alt="image-20210715161828124"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161912175.png" alt="image-20210715161912175"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161610938.png" alt="image-20210715161610938"></p>
<p><strong>也可以分成几个配置文件</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161449945.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161520817.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161534508.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715161610938.png"></p>
<h2 id="SpringBootWbe开发"><a href="#SpringBootWbe开发" class="headerlink" title="SpringBootWbe开发"></a>SpringBootWbe开发</h2><p>自动装配</p>
<p>Q: springboot帮我们配置了什么，能不能进行修改，能不能扩展</p>
<p>A: </p>
<ul>
<li>xxxxAutoConfiguration…  向容器中自动配置组件</li>
<li>xxxxProperties  自动配置类，装配配置文件中自定义的一些内容</li>
</ul>
<p><strong>web开发要解决的问题</strong></p>
<ul>
<li>导入静态资源</li>
<li>首页</li>
<li>jsp，模板引擎Thymeleaf</li>
<li>装配扩展SpringMVC</li>
<li>增删改查</li>
<li>拦截器</li>
<li>国际化（中英文切换）</li>
</ul>
<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ol>
<li><p>在springboot总，我们可以使用以下方式处理静态资源</p>
<ul>
<li><p>webjars</p>
</li>
<li><p>public，static，resources</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210715165014209.png" alt="image-20210715165014209"></p>
</li>
</ul>
</li>
<li><p>优先级：resources&gt;static(默认)&gt;public</p>
</li>
</ol>
<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>index.html可以放到public 、resources 、static 里面，可以直接进入首页</p>
<h3 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h3><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。</p>
<h4 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h4><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p>
<p>Thymeleaf-Github：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p>
<p>Spring官方文档：找到我们对应的版本</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p>
<p>pom依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--thymeleaf--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;thymeleaf-extras-java8time&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.0.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p><strong>要使用thymeleaf，只需要导入对应的依赖即可，我们将html放到templates目录下即可</strong></p>
<h4 id="Thymeleaf-语法"><a href="#Thymeleaf-语法" class="headerlink" title="Thymeleaf 语法"></a>Thymeleaf 语法</h4><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> </p>
<p><strong>我们需要查出一些数据，在页面中展示</strong></p>
<p>1、修改测试请求，增加数据传输；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;蟹不肉&quot;</span>);</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p>
<p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、我们去编写下前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、启动测试！</p>
<ol>
<li><p><strong>我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/1edsds.png"></p>
</li>
<li><p>我们能写的表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    <span class="number">1</span>）、获取对象的属性、调用方法</span><br><span class="line">    <span class="number">2</span>）、使用内置的基本对象：#<span class="number">18</span></span><br><span class="line">         #ctx : the context object.</span><br><span class="line">         #vars: the context variables.</span><br><span class="line">         #locale : the context locale.</span><br><span class="line">         #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">         #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">         #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">         #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>）、内置的一些工具对象：</span><br><span class="line">　　　　　　#execInfo : information about the template being processed.</span><br><span class="line">　　　　　　#uris : methods <span class="keyword">for</span> escaping parts of URLs/URIs</span><br><span class="line">　　　　　　#conversions : methods <span class="keyword">for</span> executing the configured conversion <span class="title function_">service</span> <span class="params">(<span class="keyword">if</span> any)</span>.</span><br><span class="line">　　　　　　#dates : methods <span class="keyword">for</span> java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">　　　　　　#calendars : analogous to #dates , but <span class="keyword">for</span> java.util.Calendar objects.</span><br><span class="line">　　　　　　#numbers : methods <span class="keyword">for</span> formatting numeric objects.</span><br><span class="line">　　　　　　#strings : methods <span class="keyword">for</span> String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">　　　　　　#objects : methods <span class="keyword">for</span> objects in general.</span><br><span class="line">　　　　　　#bools : methods <span class="keyword">for</span> <span class="type">boolean</span> evaluation.</span><br><span class="line">　　　　　　#arrays : methods <span class="keyword">for</span> arrays.</span><br><span class="line">　　　　　　#lists : methods <span class="keyword">for</span> lists.</span><br><span class="line">　　　　　　#sets : methods <span class="keyword">for</span> sets.</span><br><span class="line">　　　　　　#maps : methods <span class="keyword">for</span> maps.</span><br><span class="line">　　　　　　#aggregates : methods <span class="keyword">for</span> creating aggregates on arrays or collections.</span><br><span class="line">==================================================================================</span><br><span class="line"></span><br><span class="line">  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">  Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">  Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">  Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line"></span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: <span class="string">&#x27;one text&#x27;</span> , <span class="string">&#x27;Another one!&#x27;</span> ,…</span><br><span class="line">      Number literals: <span class="number">0</span> , <span class="number">34</span> , <span class="number">3.0</span> , <span class="number">12.3</span> ,…</span><br><span class="line">      Boolean literals: <span class="literal">true</span> , <span class="literal">false</span></span><br><span class="line">      Null literal: <span class="literal">null</span></span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">      </span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">    </span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus <span class="title function_">sign</span> <span class="params">(unary operator)</span>: -</span><br><span class="line">    </span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean <span class="title function_">negation</span> <span class="params">(unary operator)</span>: ! , not</span><br><span class="line">    </span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">    </span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (<span class="keyword">if</span>) ? (then)</span><br><span class="line">    If-then-<span class="keyword">else</span>: (<span class="keyword">if</span>) ? (then) : (<span class="keyword">else</span>)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">    </span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure></li>
</ol>
<p>练习</p>
<ol>
<li><p>我们编写一个Controller，放一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;qinjiang&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>));</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试页面取出数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>狂神说<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不转义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--遍历数据--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:each</span>=<span class="string">&quot;user :$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内写法：官网#12--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目</p>
</li>
</ol>
<h3 id="扩展springmvc"><a href="#扩展springmvc" class="headerlink" title="扩展springmvc"></a>扩展springmvc</h3><h3 id="首页国际化"><a href="#首页国际化" class="headerlink" title="首页国际化"></a>首页国际化</h3><ol>
<li>要配置i18n文件</li>
<li>我么如果需要在项目中进行按钮切换，我们需要自定义一个组件<code>LocaleResolver</code></li>
<li>记得将自己写的组件配置到spring容器中<code>@Bean</code></li>
<li>页面中用#{}</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Freenom免费申请一年的域名并且设置DNS到阿里或腾讯</title>
    <url>/2021/07/03/freenom1yearfree/</url>
    <content><![CDATA[<h2 id="在国内注册freenom需要这个，并且开全局（自备）！！！"><a href="#在国内注册freenom需要这个，并且开全局（自备）！！！" class="headerlink" title="在国内注册freenom需要这个，并且开全局（自备）！！！"></a><strong>在国内注册freenom需要这个，并且开全局（自备）！！！</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703190742278.png" alt="image-20210703190742278"></p>
<h2 id="还需要填一些信息（必须是美国的）！！！"><a href="#还需要填一些信息（必须是美国的）！！！" class="headerlink" title="还需要填一些信息（必须是美国的）！！！"></a><strong>还需要填一些信息（必须是美国的）！！！</strong></h2><p>美国人信息生成网：<a href="http://haoweichi.com/">http://haoweichi.com/</a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://www.freenom.com/zh/index.html?lang=zh">https://www.freenom.com/zh/index.html?lang=zh</a></p>
<h3 id="输入一个域名检查是否可用"><a href="#输入一个域名检查是否可用" class="headerlink" title="输入一个域名检查是否可用"></a>输入一个域名检查是否可用</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703185609005.png" alt="image-20210703185609005"></p>
<h3 id="这几个都是免费的"><a href="#这几个都是免费的" class="headerlink" title="这几个都是免费的"></a>这几个都是免费的</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703185842498.png" alt="image-20210703185842498"></p>
<h3 id="在这几个里面选择一个自己选择一个自己喜欢的后缀，比如我选的是ml，就在输入框中再添加域名-ml，再回车。"><a href="#在这几个里面选择一个自己选择一个自己喜欢的后缀，比如我选的是ml，就在输入框中再添加域名-ml，再回车。" class="headerlink" title="在这几个里面选择一个自己选择一个自己喜欢的后缀，比如我选的是ml，就在输入框中再添加域名.ml，再回车。"></a>在这几个里面选择一个自己选择一个自己喜欢的后缀，比如我选的是ml，就在输入框中再添加<code>域名.ml</code>，再回车。</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703190153292.png" alt="image-20210703190153292"></p>
<h3 id="点击完成"><a href="#点击完成" class="headerlink" title="点击完成"></a>点击完成</h3><h3 id="选择12个月，然后点击Continue"><a href="#选择12个月，然后点击Continue" class="headerlink" title="选择12个月，然后点击Continue"></a>选择12个月，然后点击Continue</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703190401358.png" alt="image-20210703190401358"></p>
<h3 id="在左下角的框中输入你的邮箱—-用于注册"><a href="#在左下角的框中输入你的邮箱—-用于注册" class="headerlink" title="在左下角的框中输入你的邮箱—&gt;用于注册"></a>在左下角的框中输入你的邮箱—&gt;用于注册</h3><h3 id="进入如下页面，而且你的邮箱会收到一封邮件"><a href="#进入如下页面，而且你的邮箱会收到一封邮件" class="headerlink" title="进入如下页面，而且你的邮箱会收到一封邮件"></a>进入如下页面，而且你的邮箱会收到一封邮件</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703191456840.png" alt="image-20210703191456840"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/image-hosting@master/20210628/image-20210703191537744.2jwp9pjyul40.png" alt="image-20210703191537744"></p>
<h3 id="点击邮件中的链接进入如下界面"><a href="#点击邮件中的链接进入如下界面" class="headerlink" title="点击邮件中的链接进入如下界面"></a>点击邮件中的链接进入如下界面</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703192218908.png" alt="image-20210703192218908"></p>
<h3 id="并将美国人身份生成网里面的对应的信息填写到对应的位置，对照如下"><a href="#并将美国人身份生成网里面的对应的信息填写到对应的位置，对照如下" class="headerlink" title="并将美国人身份生成网里面的对应的信息填写到对应的位置，对照如下"></a>并将美国人身份生成网里面的对应的信息填写到对应的位置，对照如下</h3><p>最后两个是密码</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703192310260.png" alt="image-20210703192310260"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703192705026.png" alt="image-20210703192705026"></p>
<h3 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703192756958.png" alt="image-20210703192756958"></p>
<h3 id="如下图显示就是购买成功了"><a href="#如下图显示就是购买成功了" class="headerlink" title="如下图显示就是购买成功了"></a>如下图显示就是购买成功了</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703192901910.png" alt="image-20210703192901910"></p>
<h3 id="查看域名"><a href="#查看域名" class="headerlink" title="查看域名"></a>查看域名</h3><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703192959846.png" alt="image-20210703192959846"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703193108996.png" alt="image-20210703193108996"></p>
<h3 id="设置DNS到腾讯云或者阿里云（可以不修改）"><a href="#设置DNS到腾讯云或者阿里云（可以不修改）" class="headerlink" title="设置DNS到腾讯云或者阿里云（可以不修改）"></a>设置DNS到腾讯云或者阿里云（可以不修改）</h3><ul>
<li><p>点击<strong>Manage domain</strong></p>
</li>
<li><p>点击<strong>Nameservice</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703193546543.png" alt="image-20210703193546543"></p>
</li>
<li><p>点击<strong>Use custom nameservers (enter below)</strong></p>
</li>
<li><p>以阿里云为例，进入阿里的云解析DNS，点击添加域名，把刚才的域名输入进去，点击确定</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703193918058.png" alt="image-20210703193918058"></p>
</li>
<li><p>然后把如下图的两个地址填到Nameserver 1和Nameserver 2里面</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703194128057.png" alt="image-20210703194128057"></p>
<p>点击Change Nameservers</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703194221034.png" alt="image-20210703194221034"></p>
</li>
<li><p>然后会跳转到登录页面，登录自己的账号即可，有如下提示即成功，然后进入阿里，如图二即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703194433981.png" alt="image-20210703194433981"></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210703194547481.png" alt="image-20210703194547481"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>免费域名</tag>
        <tag>freenom</tag>
        <tag>NDS解析</tag>
      </tags>
  </entry>
  <entry>
    <title>git环境配置</title>
    <url>/2021/06/08/git/</url>
    <content><![CDATA[<h2 id="git环境配置"><a href="#git环境配置" class="headerlink" title="git环境配置"></a>git环境配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>git官网：<a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC">https://git-scm.com/，下载对应操作系统的版本</a></p>
<p>如果感觉下载慢的话，可以选择开一下代理。</p>
<p>或者国内镜像：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608105734.png" alt="image-20210608105725436"></p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608105753.png" alt="image-20210608105751977"></p>
<p><strong>安装</strong>：</p>
<p>下一步下一步下一步。。。</p>
<p><strong>默认会配置环境变量。</strong></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><p>安装成功开始菜单会多出几个程序，在任意文件夹下右键也会有相应的程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608110648.png" alt="image-20210608110647320"></p>
<p>git bush：unix与linux风格的命令行，<strong>使用最多</strong>   可以使用linux命令</p>
<p>git cmd：windows风格的命令行</p>
<p>git gui：图形界面的git</p>
<h3 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h3><p>平时一定要多使用这些基础的命令！</p>
<p>1）、cd : 改变目录。</p>
<p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p>
<p>3）、pwd : 显示当前所在的目录路径。</p>
<p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p>
<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p>
<p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p>
<p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p>
<p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br></pre></td></tr></table></figure>

<p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
<p>10）、reset 重新初始化终端&#x2F;清屏。</p>
<p>11）、clear 清屏。</p>
<p>12）、history 查看命令历史。</p>
<p>13）、help 帮助。</p>
<p>14）、exit 退出。</p>
<p>15）、#表示注释</p>
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p>所有的配置文件，其实都保存在本地！</p>
<p>查看配置 git config -l</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608112334.png" alt="image-20210608112332209"></p>
<p>查看不同级别的配置文件：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看系统config文件</span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<p><strong>Git相关的配置文件：</strong></p>
<p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608113555.png" alt="image-20210608113554018"></p>
<p>2）、C:\Users\用户名\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608113640.png" alt="image-20210608113639130"></p>
<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p>
<p><strong>设置用户名与邮箱</strong></p>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxxxxx&quot;  #名称</span><br><span class="line">git config --global user.email &quot;xxxxx@xxx.com&quot;   #邮箱</span><br></pre></td></tr></table></figure>

<p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习笔记</title>
    <url>/2021/06/08/git-study/</url>
    <content><![CDATA[<h2 id="git环境配置"><a href="#git环境配置" class="headerlink" title="git环境配置"></a>git环境配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>git官网：<a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC">https://git-scm.com/，下载对应操作系统的版本</a></p>
<p>如果感觉下载慢的话，可以选择开一下代理。</p>
<p>或者国内镜像：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608105734.png" alt="image-20210608105725436"></p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608105753.png" alt="image-20210608105751977"></p>
<p><strong>安装</strong>：</p>
<p>下一步下一步下一步。。。</p>
<p><strong>默认会配置环境变量。</strong></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><p>安装成功开始菜单会多出几个程序，在任意文件夹下右键也会有相应的程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608110648.png" alt="image-20210608110647320"></p>
<p>git bush：unix与linux风格的命令行，<strong>使用最多</strong>   可以使用linux命令</p>
<p>git cmd：windows风格的命令行</p>
<p>git gui：图形界面的git</p>
<h3 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h3><p>平时一定要多使用这些基础的命令！</p>
<p>1）、cd : 改变目录。</p>
<p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p>
<p>3）、pwd : 显示当前所在的目录路径。</p>
<p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p>
<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p>
<p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p>
<p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p>
<p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br></pre></td></tr></table></figure>

<p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
<p>10）、reset 重新初始化终端&#x2F;清屏。</p>
<p>11）、clear 清屏。</p>
<p>12）、history 查看命令历史。</p>
<p>13）、help 帮助。</p>
<p>14）、exit 退出。</p>
<p>15）、#表示注释</p>
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p>所有的配置文件，其实都保存在本地！</p>
<p>查看配置 git config -l</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608112334.png" alt="image-20210608112332209"></p>
<p>查看不同级别的配置文件：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看系统config文件</span></span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<p><strong>Git相关的配置文件：</strong></p>
<p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608113555.png" alt="image-20210608113554018"></p>
<p>2）、C:\Users\用户名\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608113640.png" alt="image-20210608113639130"></p>
<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p>
<p><strong>设置用户名与邮箱</strong></p>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxxxx&quot;</span>  <span class="comment">#名称</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxxx@xxx.com&quot;</span>   <span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure>

<p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p>
<h2 id="git基本理论（重要）"><a href="#git基本理论（重要）" class="headerlink" title="git基本理论（重要）"></a>git基本理论（重要）</h2><h3 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。</p>
<p>如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。</p>
<p>文件在这四个区域之间的转换关系如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608194105.jpeg"></p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608194450.jpeg"></p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>git的工作流程一般是这样的：</p>
<p>１、在工作目录中添加、修改文件</p>
<p>２、将需要进行版本管理的文件放入暂存区域</p>
<p>３、将暂存区域的文件提交到git仓库</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608194659.jpeg"></p>
<h2 id="git项目搭建"><a href="#git项目搭建" class="headerlink" title="git项目搭建"></a>git项目搭建</h2><h3 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h3><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608195009.png" alt="image-20210608195008421"></p>
<h3 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h3><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]  <span class="comment"># https://gitee.com/kuangstudy/openclass.git</span></span><br></pre></td></tr></table></figure>

<p>2、去 gitee 或者 github 上克隆一个测试！</p>
<h2 id="git文件操作"><a href="#git文件操作" class="headerlink" title="git文件操作"></a>git文件操作</h2><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态git status [filename]</span></span><br><span class="line"><span class="comment">#查看所有文件状态git status</span></span><br><span class="line"><span class="comment"># git add .                 添加所有文件到暂存区</span></span><br><span class="line"><span class="comment"># git commit -m &quot;消息内容&quot;   提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>

<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释*.txt        </span></span><br><span class="line"><span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt     </span></span><br><span class="line"><span class="comment">#但lib.txt除外/temp        </span></span><br><span class="line"><span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild/       </span></span><br><span class="line"><span class="comment">#忽略build/目录下的所有文件doc/*.txt    </span></span><br><span class="line"><span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="使用github"><a href="#使用github" class="headerlink" title="使用github"></a>使用github</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p>1、注册登录</p>
<p>2、设置本机绑定ssh公钥，实现买密码登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\用户名\.ssh 目录</span></span><br><span class="line"><span class="comment"># 生成公钥命令</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>3、将公钥信息添加到github账户中</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608152345.png" alt="image-20210608152344372"></p>
<p>右键记事本打开，复制，打开github，点击头像，找到设置选择ssh公钥，如下图，粘贴到公钥处</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608173208.png"></p>
<p>4、创建一个仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608153542.png"></p>
<p>5、克隆远程仓库到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:c-x-x/gitstudy.git</span><br></pre></td></tr></table></figure>

<h2 id="在idea中集成git"><a href="#在idea中集成git" class="headerlink" title="在idea中集成git"></a>在idea中集成git</h2><p>1、新建项目，绑定git</p>
<ul>
<li>方式一：新建的项目跟远程git的文件的名称相同</li>
<li>方式二：将远程的git文件目录拷贝到项目中即可（推荐）</li>
</ul>
<p>idea中的变化：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608184850.png" alt="image-20210608184848768"></p>
<p>2、使用idea操作git</p>
<ul>
<li><p>添加到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>commit提交到本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息（自己写）&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>push到远端仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210608191610.png" alt="image-20210608191609059"></p>
<p><strong>这些都是单人的操作</strong></p>
<h2 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h2><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>
<p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p>
<p>官网介绍：<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B">点我进入</a></p>
<h3 id="git分支中常用的命令"><a href="#git分支中常用的命令" class="headerlink" title="git分支中常用的命令"></a>git分支中常用的命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete 分支名</span><br><span class="line">$ git branch -dr 分支名</span><br></pre></td></tr></table></figure>

<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p>
<p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>idea常用快捷键</title>
    <url>/2021/07/09/idea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="空"><a href="#空" class="headerlink" title="空"></a>空</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用中的问题以及解决方法</title>
    <url>/2021/06/09/hexo%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="hexo使用中的问题以及解决方法"><a href="#hexo使用中的问题以及解决方法" class="headerlink" title="hexo使用中的问题以及解决方法"></a>hexo使用中的问题以及解决方法</h2><h3 id="更换GitHub账号后，hexo-d-提交不上去"><a href="#更换GitHub账号后，hexo-d-提交不上去" class="headerlink" title="更换GitHub账号后，hexo d 提交不上去"></a>更换GitHub账号后，hexo d 提交不上去</h3><p>因为之前使用过，所以电脑上还保存着之前的GitHub账户密码</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>进入控制面板—&gt;用户账户—&gt;管理你的凭据（图一）—&gt;Windows凭据（图二）—&gt;在下面找到<code>git:https://github.com</code>（图三）—&gt;点击删除</p>
<p>然后继续hexo d 输入账号密码，大功告成！</p>
<p>图一：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/image-20210609144522511.png" alt="image-20210609144522511"></p>
<p>图二：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/image-20210609144615726.png" alt="image-20210609144615726"></p>
<p>图三：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/image-20210609144727823.png" alt="image-20210609144727823"></p>
<h2 id="Git配置多个SSH-Key"><a href="#Git配置多个SSH-Key" class="headerlink" title="Git配置多个SSH-Key"></a>Git配置多个SSH-Key</h2><h3 id="当你有多个git账号"><a href="#当你有多个git账号" class="headerlink" title="当你有多个git账号"></a>当你有多个git账号</h3><p>一个gitee，用于公司内部的工作开发<br>一个github，用于自己进行一些开发活动</p>
<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>生成一个公司用的ssh-key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;用户邮箱&#x27;</span> -f ~/.ssh/gitee_id_rsa</span><br></pre></td></tr></table></figure>

<p>生成一个自己用的ssh-key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;用户邮箱&#x27;</span> -f ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure>

<p>在.ssh目录下新建一个config文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.ssh/config</span><br></pre></td></tr></table></figure>

<p>添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure>

<p>测试配置情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>返回以下内容即成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/image-20210609150434546.png" alt="image-20210609150434546"></p>
]]></content>
      <categories>
        <category>hexo使用中的问题</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea插件-获取maven依赖</title>
    <url>/2021/07/08/idea%E6%8F%92%E4%BB%B6-search%20in%20repository/</url>
    <content><![CDATA[<p>我们平时使用maven构建项目时，还需要去中央仓库去依赖，相当的麻烦</p>
<p>可以试试这款idea插件—-&gt;<code>search in repository</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/image-hosting@master/20210628/image-20210708224912179.3j9g45zpss80.png" alt="image-20210708224912179"></p>
<p>使用方式如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/image-hosting@master/20210628/image.390sqrfpjbu0.png" alt="image"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>idea配置代理</title>
    <url>/2021/07/01/idea%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="打开idea"><a href="#打开idea" class="headerlink" title="打开idea"></a>打开idea</h2><p><strong>左上角Flie</strong></p>
<p>File | Settings | Appearance &amp; Behavior | System Settings | HTTP Proxy</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210701165941078.png" alt="image-20210701165941078"></p>
<p>选择Manual proxy configuration</p>
<p>选择socks</p>
<p>hostname：localhost</p>
<p>prot number：7890</p>
<p>点击Check connection</p>
<p>输入<a href="https://youtube.com/">https://youtube.com</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210701170325727.png" alt="image-20210701170325727"></p>
<p>点击ok</p>
<p>如下图显示就成功了</p>
<p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/image-20210701170403998.png" alt="image-20210701170403998"></p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>idea配置代理</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>idea中使用maven</title>
    <url>/2021/06/07/idea%E7%BC%96%E8%BE%91%E5%99%A8%E9%9B%86%E6%88%90Maven%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="IDEA编辑器集成Maven环境"><a href="#IDEA编辑器集成Maven环境" class="headerlink" title="IDEA编辑器集成Maven环境"></a>IDEA编辑器集成Maven环境</h2><p><strong>选择”file”—&gt;”OtherSettings”—&gt;”Settings for New Projects…”—&gt;搜索Maven</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210607195143.png" alt="image-20210607195134186"></p>
<h2 id="Maven项目的创建"><a href="#Maven项目的创建" class="headerlink" title="Maven项目的创建"></a>Maven项目的创建</h2><h3 id="1、创建Java项目"><a href="#1、创建Java项目" class="headerlink" title="1、创建Java项目"></a>1、创建Java项目</h3><p>1、选择file—&gt;new—&gt;project</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210607200012.png" alt="image-20210607200010802"></p>
<p>2、设置项目的GroupId和ArtifactId</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210607200253.png" alt="image-20210607200251592"></p>
<p>3、检查Maven环境</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210607200428.png" alt="image-20210607200426284"></p>
<p>4、等待项目创建，下载资源</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210607200641.png" alt="image-20210607200639664"></p>
<h3 id="2、创建web项目"><a href="#2、创建web项目" class="headerlink" title="2、创建web项目"></a>2、创建web项目</h3><p>创建web项目与创建Java项目基本无异，区别在于选择maven模板（web项目选择webapp）</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210607201637.png" alt="image-20210607201636797"></p>
<p>其他与创建Java项目无异。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>idea</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown的使用</title>
    <url>/2021/06/07/markdown/</url>
    <content><![CDATA[<h2 id="什么是MarkDown？"><a href="#什么是MarkDown？" class="headerlink" title="什么是MarkDown？"></a>什么是MarkDown？</h2><p>Markdown是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/52671915">轻量级标记语言</a>，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的<a href="https://baike.baidu.com/item/%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/9862288">纯文本格式</a>编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 如<a href="https://baike.baidu.com/item/GitHub/10145341">GitHub</a>、<a href="https://baike.baidu.com/item/Reddit/1272010">Reddit</a>、<a href="https://baike.baidu.com/item/Diaspora/10726893">Diaspora</a>、[Stack Exchange](<a href="https://baike.baidu.com/item/Stack">https://baike.baidu.com/item/Stack</a> Exchange&#x2F;13777796)、<a href="https://baike.baidu.com/item/OpenStreetMap/3171606">OpenStreetMap</a> 、<a href="https://baike.baidu.com/item/SourceForge/6562141">SourceForge</a>、<a href="https://baike.baidu.com/item/%E7%AE%80%E4%B9%A6/5782216">简书</a>等，甚至还能被使用来撰写<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B9%A6/346054">电子书</a>。</p>
<p>——百度百科</p>
<h2 id="为什么要使用Markdown？"><a href="#为什么要使用Markdown？" class="headerlink" title="为什么要使用Markdown？"></a>为什么要使用Markdown？</h2><p>您可能想知道为什么人们使用Markdown而不是WYSIWYG编辑器。当您可以按下界面中的按钮来设置文本格式时，为什么还要使用Markdown书写？事实证明，人们使用Markdown而不是WYSIWYG编辑器的原因有两个。</p>
<ul>
<li>Markdown可以用于一切。人们使用它来创建<a href="http://markdown.p2hp.com/getting-started/index.html#websites">网站</a>，<a href="http://markdown.p2hp.com/getting-started/index.html#documents">文档</a>，<a href="http://markdown.p2hp.com/getting-started/index.html#notes">便笺</a>，<a href="http://markdown.p2hp.com/getting-started/index.html#books">书籍</a>，<a href="http://markdown.p2hp.com/getting-started/index.html#presentations">演示文稿</a>，<a href="http://markdown.p2hp.com/getting-started/index.html#email">电子邮件</a>和<a href="http://markdown.p2hp.com/getting-started/index.html#documentation">技术文档</a>。</li>
<li>Markdown是便携式的。几乎可以使用任何应用程序打开包含Markdown格式文本的文件。如果您决定不喜欢当前使用的Markdown应用程序，则可以将Markdown文件导入另一个Markdown应用程序。这与Microsoft Word等文字处理应用程序形成了鲜明的对比，Microsoft Word将文字内容锁定为专有文件格式。</li>
<li>Markdown是独立于平台的。您可以在运行任何操作系统的任何设备上创建Markdown格式的文本。</li>
<li>MarkDown是未来的证明。即使您正在使用的应用程序将来会在某个时候停止工作，您仍然可以使用文本编辑应用程序读取Markdown格式的文本。当涉及需要无限期保存的书籍，大学论文和其他里程碑文件时，这是一个重要的考虑因素。</li>
<li>Markdown无处不在。Reddit和GitHub等网站都支持Markdown，许多桌面和基于Web的应用程序都支持它。</li>
</ul>
<h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>markdown由两种标题标记格式</p>
<p>1、使用&#x3D;和-标记一级和二级标题，在文本下方的行上，添加任意数量的<code>==</code>标题级别1的<code>--</code>字符或标题级别2的字符</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">一级标题</span></span><br><span class="line"><span class="section">=======</span></span><br><span class="line"><span class="section">二级标题</span></span><br><span class="line"><span class="section">-------</span></span><br></pre></td></tr></table></figure>

<p>2、使用#标记，使用#可以标记1-6级的标题，一级就是一个＃，几级就是几个#，#和文本之间要加一个空格</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落没有特殊格式，直接编写文字就好</p>
<h4 id="段落换行"><a href="#段落换行" class="headerlink" title="段落换行"></a>段落换行</h4><p>段落换行就是使用两个以上的空格加回车</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">hello   </span><br><span class="line">word!</span><br></pre></td></tr></table></figure>

<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>markdown可以使用以下几种字体：</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br></pre></td></tr></table></figure>

<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">---</span></span></span><br><span class="line"><span class="strong"><span class="section">___</span></span></span><br><span class="line"><span class="strong"><span class="section">* * * *</span></span></span><br><span class="line"><span class="strong"><span class="section">- - -</span></span></span><br></pre></td></tr></table></figure>

<h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>在文字的两端加上两个波浪线即可</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~hello,word~~</span><br></pre></td></tr></table></figure>

<h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>下划线可以通过html的<code>&lt;u&gt;</code>标签实现</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>hello,word<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>脚注是对文本的补充说明</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[^hello,word]</span><br><span class="line">[<span class="symbol">^hello,word</span>]: <span class="link">你好，世界</span></span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表使用 * 、 <strong>+</strong> 或是 <strong>-</strong> 作为列表标记，这些标记后面要添加一个空格，然后再填写内容</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br></pre></td></tr></table></figure>

<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表使用数字加上.来表示</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure>

<h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需在子列表中的选项前面添加四个空格即可</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">    -</span> 第1.1项</span><br></pre></td></tr></table></figure>

<h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块引用实在段落开头使用 <strong>&gt;</strong> 符号，然后一个空格</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块1</span></span><br><span class="line"><span class="quote">&gt; 区块2</span></span><br><span class="line"><span class="quote">&gt; 区块3</span></span><br></pre></td></tr></table></figure>

<h4 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h4><p>一个 <strong>&gt;</strong> 是最外层，两个 <strong>&gt;</strong> 是第一层嵌套，以此类推</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line">&gt;&gt; 第一次嵌套</span><br><span class="line">&gt;&gt;&gt; 第二次嵌套</span><br></pre></td></tr></table></figure>

<h4 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h4><p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;区块中使用列表</span><br><span class="line">&gt;1.啦啦啦</span><br><span class="line">&gt;2.啦啦啦</span><br><span class="line">&gt;3.啦啦啦</span><br></pre></td></tr></table></figure>

<h4 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h4><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="code">    &gt; xxxxx</span></span><br><span class="line"><span class="code">    &gt; xxxxx</span></span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="段落上的代码"><a href="#段落上的代码" class="headerlink" title="段落上的代码"></a>段落上的代码</h4><p>如果是段落上的一个函数或片段的代码可以用反引号&#96;把它包起来</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">啦啦啦啦<span class="code">`printf()`</span>啦啦</span><br></pre></td></tr></table></figure>

<h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>代码区块使用四个空格或者一个制表符</p>
<p>你也可以用 <strong>&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言</p>
<p>语法如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210314120955.png" alt="image-20210314120953433"></p>
<p>效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入杨辉三角的行数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> n=sc.nextInt();</span><br><span class="line">        <span class="type">int</span> [][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][];<span class="comment">//创建一个不规则数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;<span class="comment">//0 1 2 3 4 5 6 7</span></span><br><span class="line">            arr[i]=<span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];<span class="comment">//创建一个一维数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i].length&lt;<span class="number">3</span>) &#123;</span><br><span class="line">                    arr[i][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//头赋值为1</span></span><br><span class="line">                    arr[i][arr[i].length-<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//尾赋值为1</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==<span class="number">0</span>||j==arr[i].length-<span class="number">1</span>) &#123;</span><br><span class="line">                        arr[i][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//头赋值为1</span></span><br><span class="line">                        arr[i][arr[i].length-<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//尾赋值为1</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j];<span class="comment">//公式</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=arr.length-<span class="number">1</span>-i;j&gt;<span class="number">0</span>;j--) &#123;<span class="comment">//显示更加好看</span></span><br><span class="line">                System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot;    &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接使用方法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line">或者</span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.baidu.com/">百度</a></p>
<p><a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<h4 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h4><p>可以通过一个变量来设置链接，变量赋值在文档末尾进行</p>
<p>举例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">百度</span>][<span class="symbol">1</span>]</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.baidu.com/">百度</a></p>
<h4 id="禁止自动URL链接"><a href="#禁止自动URL链接" class="headerlink" title="禁止自动URL链接"></a>禁止自动URL链接</h4><p>可以通过将URL表示为带有刻度线的代码来删除该链接</p>
<p>举例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`https://www.baidu.com`</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><code>https://www.baidu.com</code></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>一个感叹号，一个方括号，里面放上图片的替代文字（可以留空），然后一个小括号，里面是图片的网址（可以加个引号，在里面写图片标题）</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>也可以项网址那样对图片网址使用变量</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">啦啦啦</span>][<span class="symbol">1</span>]</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210310122224.jpg</span></span><br></pre></td></tr></table></figure>

<h4 id="图片指定高度"><a href="#图片指定高度" class="headerlink" title="图片指定高度"></a>图片指定高度</h4><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的<img>标签</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/fristalpha/alpha/BlogPic/20210310122224.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>制作表格使用 <strong>|</strong> 来分割不同的单元格，使用 <strong>-</strong> 来分割表头和其他行</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|  表头  |  表头  |</span><br><span class="line">|  ---  |  ----  |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line">| 单元格 | mark单元格 |</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>mark单元格</td>
</tr>
</tbody></table>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p>语法如下：</p>
<ul>
<li><strong>-:</strong> 内容和标题栏居中右对齐</li>
<li><strong>:-</strong> 内容和标题栏剧中左对齐</li>
<li><strong>:-:</strong> 内容和标题栏剧中对齐</li>
</ul>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>要显示原义字符，请在字符前面添加反斜杠</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="emphasis">*啦啦啦*</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>*啦啦啦*</p>
<p>如果没有反斜杠，将显示斜体字</p>
]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>轻量标记语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/2023/09/29/mybatis/</url>
    <content><![CDATA[<h1 id="有些问题！！！"><a href="#有些问题！！！" class="headerlink" title="有些问题！！！"></a>有些问题！！！</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19及以上</li>
<li>maven-3.6.1及以上</li>
<li>IDEA</li>
</ul>
<p>学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<h3 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h3><ul>
<li><p>MyBatis 是一款优秀的<strong>持久层框架</strong></p>
</li>
<li><p>它支持</p>
</li>
<li><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</p>
</li>
<li><p>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</p>
</li>
<li><p>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</p>
</li>
<li><p>2013年11月迁移到<strong>Github</strong> .</p>
</li>
<li><p>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
<li><p>maven配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>GitHub : <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p>
</li>
</ul>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>
</ul>
<p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>
</ul>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><strong>什么是持久层？</strong></p>
<ul>
<li>完成持久化工作的代码块 . —-&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</li>
</ul>
<h3 id="为什么要用MyBatis"><a href="#为什么要用MyBatis" class="headerlink" title="为什么要用MyBatis"></a>为什么要用MyBatis</h3><ul>
<li>方便</li>
</ul>
<ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 </p>
</li>
<li><p>传统的JDBC操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
</ul>
<ul>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。<strong>sql和代码的分离，</strong>提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>…….</li>
</ul>
</li>
<li><p>最重要的一点，使用的人多！公司需要！</p>
</li>
</ul>
<h2 id="第一个MyBatis程序"><a href="#第一个MyBatis程序" class="headerlink" title="第一个MyBatis程序"></a>第一个MyBatis程序</h2><p><strong>思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</strong></p>
<h3 id="搭建实验数据库"><a href="#搭建实验数据库" class="headerlink" title="搭建实验数据库"></a>搭建实验数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis;</span><br><span class="line"><span class="comment">-- 进入数据库</span></span><br><span class="line">USE mybatis;</span><br><span class="line"><span class="comment">-- 如果有表删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">pwd <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;狂神&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;abcdef&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;987654&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="导入MyBatis相关-jar-包"><a href="#导入MyBatis相关-jar-包" class="headerlink" title="导入MyBatis相关 jar 包"></a>导入MyBatis相关 jar 包</h3><ul>
<li>GitHub上找</li>
<li>Maven的pom.xml文件中导入以下依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入依赖 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mybatis驱动 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写MyBatis核心配置文件"><a href="#编写MyBatis核心配置文件" class="headerlink" title="编写MyBatis核心配置文件"></a>编写MyBatis核心配置文件</h3><ul>
<li>查看帮助文档</li>
<li>在resources目录创建mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/cheng/dao/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写MyBatis工具类"><a href="#编写MyBatis工具类" class="headerlink" title="编写MyBatis工具类"></a>编写MyBatis工具类</h3><ul>
<li>查看帮助文档</li>
<li>创建目录com.xxxxx.utils，创建一个类，名为MybatisUtils</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">           <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">           sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取SqlSession连接</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><ul>
<li>创建目录com.xxxxx.pojo，创建一个类，名为User</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;  <span class="comment">//id</span></span><br><span class="line">   <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">   <span class="keyword">private</span> String pwd;   <span class="comment">//密码</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//构造,有参,无参</span></span><br><span class="line">   <span class="comment">//set/get</span></span><br><span class="line">   <span class="comment">//toString()</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Mapper接口类"><a href="#编写Mapper接口类" class="headerlink" title="编写Mapper接口类"></a>编写Mapper接口类</h3><ul>
<li>创建目录com.xxxxx.mapper，创建一个接口，名为XxxMapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">   List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Mapper-xml配置文件"><a href="#编写Mapper-xml配置文件" class="headerlink" title="编写Mapper.xml配置文件"></a>编写Mapper.xml配置文件</h3><ul>
<li>在com.xxxxx.mapper目录下，创建一个xml文件，名为XxxMapper.xml</li>
<li>namespace 十分重要，不能写错！</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cheng.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cheng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><ul>
<li>Junit 包测试</li>
<li>在test的java目录下创建相同的目录（com.xxxxx.mapper），创建一个类，名为MyTest</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">       <span class="comment">//方法一:</span></span><br><span class="line">       <span class="comment">//List&lt;User&gt; users = session.selectList(&quot;com.kuang.mapper.UserMapper.selectUser&quot;);</span></span><br><span class="line">       <span class="comment">//方法二:</span></span><br><span class="line">       <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">       List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">      &#125;</span><br><span class="line">       session.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行测试，成功的查询出来的我们的数据，ok！"><a href="#运行测试，成功的查询出来的我们的数据，ok！" class="headerlink" title="运行测试，成功的查询出来的我们的数据，ok！"></a>运行测试，成功的查询出来的我们的数据，ok！</h3><blockquote>
<p>问题说明</p>
</blockquote>
<p><strong>可能出现问题说明：Maven静态资源过滤问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有了MyBatis以后再也不用写原生的JDBC代码了，舒服！</p>
<h2 id="CRUD（增删改查）"><a href="#CRUD（增删改查）" class="headerlink" title="CRUD（增删改查）"></a>CRUD（增删改查）</h2><p>增加(Create)、检索(Retrieve)、更新(Update)和删除(Delete)</p>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>namespace中的包名要和接口中的一致！！！</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>选择，查询语句</p>
<ul>
<li>id对应的namespace中的方法名</li>
<li>resultType：sql语句执行的返回值</li>
<li>parameterType：参数类型</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>使用本地代理给git和npm加速</title>
    <url>/2021/07/01/proxyGitNpm/</url>
    <content><![CDATA[<h2 id="查看代理软件端口"><a href="#查看代理软件端口" class="headerlink" title="查看代理软件端口"></a>查看代理软件端口</h2><p><img src="https://cdn.jsdelivr.net/gh/c-x-x/picture/img/111.png"></p>
<h2 id="配置git代理"><a href="#配置git代理" class="headerlink" title="配置git代理"></a>配置git代理</h2><p> <strong><code>http</code> 代理和 <code>socks5</code> 代理二选一</strong></p>
<p><strong>127.0.0.1是特指本地地址。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line"><span class="comment"># socks5代理</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:7890</span><br><span class="line"><span class="comment"># 如果你只想针对 GitHub 的话，如下命令</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p><strong>取消全局代理</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<h2 id="配置npm代理"><a href="#配置npm代理" class="headerlink" title="配置npm代理"></a>配置npm代理</h2><p><strong>配置代理</strong></p>
<p>npm支持 <code>http</code> 代理类型，但是不支持 <code>socks5</code> 代理类型，如果需要，自行<a href="https://www.baidu.com/">百度</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://127.0.0.1:7890</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p><strong>取消代理</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>代理</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代理</tag>
        <tag>proxy</tag>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
